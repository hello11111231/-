<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.transnova.foundation.driver.mapper.DriverLicenseMapper">
  <resultMap id="BaseResultMap" type="com.transnova.foundation.driver.model.DriverLicense">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="driverId" jdbcType="BIGINT" property="driverId" />
    <result column="driverNumber" jdbcType="VARCHAR" property="driverNumber" />
    <result column="fileEncoding" jdbcType="VARCHAR" property="fileEncoding" />
    <result column="model" jdbcType="VARCHAR" property="model" />
    <result column="initialCertificate" jdbcType="DATE" property="initialCertificate" />
    <result column="startExpiryDate" jdbcType="DATE" property="startExpiryDate" />
    <result column="endExpiryDate" jdbcType="DATE" property="endExpiryDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, driverId, driverNumber, fileEncoding, model, initialCertificate, startExpiryDate, 
    endExpiryDate
  </sql>
  <select id="selectByExample" parameterType="com.transnova.foundation.driver.mapper.DriverLicenseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from driver_license
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from driver_license
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from driver_license
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.transnova.foundation.driver.mapper.DriverLicenseExample">
    delete from driver_license
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.transnova.foundation.driver.model.DriverLicense">
    insert into driver_license (id, driverId, driverNumber, 
      fileEncoding, model, initialCertificate, 
      startExpiryDate, endExpiryDate)
    values (#{id,jdbcType=BIGINT}, #{driverId,jdbcType=BIGINT}, #{driverNumber,jdbcType=VARCHAR}, 
      #{fileEncoding,jdbcType=VARCHAR}, #{model,jdbcType=VARCHAR}, #{initialCertificate,jdbcType=DATE}, 
      #{startExpiryDate,jdbcType=DATE}, #{endExpiryDate,jdbcType=DATE})
  </insert>
  <insert id="insertSelective" parameterType="com.transnova.foundation.driver.model.DriverLicense">
    insert into driver_license
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="driverId != null">
        driverId,
      </if>
      <if test="driverNumber != null">
        driverNumber,
      </if>
      <if test="fileEncoding != null">
        fileEncoding,
      </if>
      <if test="model != null">
        model,
      </if>
      <if test="initialCertificate != null">
        initialCertificate,
      </if>
      <if test="startExpiryDate != null">
        startExpiryDate,
      </if>
      <if test="endExpiryDate != null">
        endExpiryDate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="driverId != null">
        #{driverId,jdbcType=BIGINT},
      </if>
      <if test="driverNumber != null">
        #{driverNumber,jdbcType=VARCHAR},
      </if>
      <if test="fileEncoding != null">
        #{fileEncoding,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        #{model,jdbcType=VARCHAR},
      </if>
      <if test="initialCertificate != null">
        #{initialCertificate,jdbcType=DATE},
      </if>
      <if test="startExpiryDate != null">
        #{startExpiryDate,jdbcType=DATE},
      </if>
      <if test="endExpiryDate != null">
        #{endExpiryDate,jdbcType=DATE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.transnova.foundation.driver.mapper.DriverLicenseExample" resultType="java.lang.Long">
    select count(*) from driver_license
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update driver_license
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.driverId != null">
        driverId = #{record.driverId,jdbcType=BIGINT},
      </if>
      <if test="record.driverNumber != null">
        driverNumber = #{record.driverNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.fileEncoding != null">
        fileEncoding = #{record.fileEncoding,jdbcType=VARCHAR},
      </if>
      <if test="record.model != null">
        model = #{record.model,jdbcType=VARCHAR},
      </if>
      <if test="record.initialCertificate != null">
        initialCertificate = #{record.initialCertificate,jdbcType=DATE},
      </if>
      <if test="record.startExpiryDate != null">
        startExpiryDate = #{record.startExpiryDate,jdbcType=DATE},
      </if>
      <if test="record.endExpiryDate != null">
        endExpiryDate = #{record.endExpiryDate,jdbcType=DATE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update driver_license
    set id = #{record.id,jdbcType=BIGINT},
      driverId = #{record.driverId,jdbcType=BIGINT},
      driverNumber = #{record.driverNumber,jdbcType=VARCHAR},
      fileEncoding = #{record.fileEncoding,jdbcType=VARCHAR},
      model = #{record.model,jdbcType=VARCHAR},
      initialCertificate = #{record.initialCertificate,jdbcType=DATE},
      startExpiryDate = #{record.startExpiryDate,jdbcType=DATE},
      endExpiryDate = #{record.endExpiryDate,jdbcType=DATE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.transnova.foundation.driver.model.DriverLicense">
    update driver_license
    <set>
      <if test="driverId != null">
        driverId = #{driverId,jdbcType=BIGINT},
      </if>
      <if test="driverNumber != null">
        driverNumber = #{driverNumber,jdbcType=VARCHAR},
      </if>
      <if test="fileEncoding != null">
        fileEncoding = #{fileEncoding,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        model = #{model,jdbcType=VARCHAR},
      </if>
      <if test="initialCertificate != null">
        initialCertificate = #{initialCertificate,jdbcType=DATE},
      </if>
      <if test="startExpiryDate != null">
        startExpiryDate = #{startExpiryDate,jdbcType=DATE},
      </if>
      <if test="endExpiryDate != null">
        endExpiryDate = #{endExpiryDate,jdbcType=DATE},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.transnova.foundation.driver.model.DriverLicense">
    update driver_license
    set driverId = #{driverId,jdbcType=BIGINT},
      driverNumber = #{driverNumber,jdbcType=VARCHAR},
      fileEncoding = #{fileEncoding,jdbcType=VARCHAR},
      model = #{model,jdbcType=VARCHAR},
      initialCertificate = #{initialCertificate,jdbcType=DATE},
      startExpiryDate = #{startExpiryDate,jdbcType=DATE},
      endExpiryDate = #{endExpiryDate,jdbcType=DATE}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>