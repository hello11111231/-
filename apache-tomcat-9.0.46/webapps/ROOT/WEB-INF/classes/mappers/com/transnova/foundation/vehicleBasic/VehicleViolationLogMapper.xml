<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.transnova.foundation.vehicleBasic.mapper.VehicleViolationLogMapper">
  <resultMap id="BaseResultMap" type="com.transnova.foundation.vehicleBasic.model.VehicleViolationLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="vehicleId" jdbcType="BIGINT" property="vehicleId" />
    <result column="occurTime" jdbcType="TIMESTAMP" property="occurTime" />
    <result column="event" jdbcType="VARCHAR" property="event" />
    <result column="points" jdbcType="INTEGER" property="points" />
    <result column="forfeit" jdbcType="DECIMAL" property="forfeit" />
    <result column="longitude" jdbcType="DOUBLE" property="longitude" />
    <result column="latitude" jdbcType="DOUBLE" property="latitude" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="updateUserId" jdbcType="BIGINT" property="updateUserId" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="createUserId" jdbcType="BIGINT" property="createUserId" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
    <result column="state" jdbcType="VARCHAR" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, vehicleId, occurTime, event, points, forfeit, longitude, latitude, address, updateUserId, 
    updateTime, createUserId, createTime, deleted, state
  </sql>
  <select id="selectByExample" parameterType="com.transnova.foundation.vehicleBasic.mapper.VehicleViolationLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from vehicle_violation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from vehicle_violation_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from vehicle_violation_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.transnova.foundation.vehicleBasic.mapper.VehicleViolationLogExample">
    delete from vehicle_violation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.transnova.foundation.vehicleBasic.model.VehicleViolationLog">
    insert into vehicle_violation_log (id, vehicleId, occurTime, 
      event, points, forfeit, 
      longitude, latitude, address, 
      updateUserId, updateTime, createUserId, 
      createTime, deleted, state
      )
    values (#{id,jdbcType=BIGINT}, #{vehicleId,jdbcType=BIGINT}, #{occurTime,jdbcType=TIMESTAMP}, 
      #{event,jdbcType=VARCHAR}, #{points,jdbcType=INTEGER}, #{forfeit,jdbcType=DECIMAL}, 
      #{longitude,jdbcType=DOUBLE}, #{latitude,jdbcType=DOUBLE}, #{address,jdbcType=VARCHAR}, 
      #{updateUserId,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, #{createUserId,jdbcType=BIGINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{deleted,jdbcType=BIT}, #{state,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.transnova.foundation.vehicleBasic.model.VehicleViolationLog">
    insert into vehicle_violation_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="vehicleId != null">
        vehicleId,
      </if>
      <if test="occurTime != null">
        occurTime,
      </if>
      <if test="event != null">
        event,
      </if>
      <if test="points != null">
        points,
      </if>
      <if test="forfeit != null">
        forfeit,
      </if>
      <if test="longitude != null">
        longitude,
      </if>
      <if test="latitude != null">
        latitude,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="updateUserId != null">
        updateUserId,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
      <if test="createUserId != null">
        createUserId,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="vehicleId != null">
        #{vehicleId,jdbcType=BIGINT},
      </if>
      <if test="occurTime != null">
        #{occurTime,jdbcType=TIMESTAMP},
      </if>
      <if test="event != null">
        #{event,jdbcType=VARCHAR},
      </if>
      <if test="points != null">
        #{points,jdbcType=INTEGER},
      </if>
      <if test="forfeit != null">
        #{forfeit,jdbcType=DECIMAL},
      </if>
      <if test="longitude != null">
        #{longitude,jdbcType=DOUBLE},
      </if>
      <if test="latitude != null">
        #{latitude,jdbcType=DOUBLE},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="updateUserId != null">
        #{updateUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.transnova.foundation.vehicleBasic.mapper.VehicleViolationLogExample" resultType="java.lang.Long">
    select count(*) from vehicle_violation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update vehicle_violation_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.vehicleId != null">
        vehicleId = #{record.vehicleId,jdbcType=BIGINT},
      </if>
      <if test="record.occurTime != null">
        occurTime = #{record.occurTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.event != null">
        event = #{record.event,jdbcType=VARCHAR},
      </if>
      <if test="record.points != null">
        points = #{record.points,jdbcType=INTEGER},
      </if>
      <if test="record.forfeit != null">
        forfeit = #{record.forfeit,jdbcType=DECIMAL},
      </if>
      <if test="record.longitude != null">
        longitude = #{record.longitude,jdbcType=DOUBLE},
      </if>
      <if test="record.latitude != null">
        latitude = #{record.latitude,jdbcType=DOUBLE},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.updateUserId != null">
        updateUserId = #{record.updateUserId,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserId != null">
        createUserId = #{record.createUserId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=BIT},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update vehicle_violation_log
    set id = #{record.id,jdbcType=BIGINT},
      vehicleId = #{record.vehicleId,jdbcType=BIGINT},
      occurTime = #{record.occurTime,jdbcType=TIMESTAMP},
      event = #{record.event,jdbcType=VARCHAR},
      points = #{record.points,jdbcType=INTEGER},
      forfeit = #{record.forfeit,jdbcType=DECIMAL},
      longitude = #{record.longitude,jdbcType=DOUBLE},
      latitude = #{record.latitude,jdbcType=DOUBLE},
      address = #{record.address,jdbcType=VARCHAR},
      updateUserId = #{record.updateUserId,jdbcType=BIGINT},
      updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      createUserId = #{record.createUserId,jdbcType=BIGINT},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=BIT},
      state = #{record.state,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.transnova.foundation.vehicleBasic.model.VehicleViolationLog">
    update vehicle_violation_log
    <set>
      <if test="vehicleId != null">
        vehicleId = #{vehicleId,jdbcType=BIGINT},
      </if>
      <if test="occurTime != null">
        occurTime = #{occurTime,jdbcType=TIMESTAMP},
      </if>
      <if test="event != null">
        event = #{event,jdbcType=VARCHAR},
      </if>
      <if test="points != null">
        points = #{points,jdbcType=INTEGER},
      </if>
      <if test="forfeit != null">
        forfeit = #{forfeit,jdbcType=DECIMAL},
      </if>
      <if test="longitude != null">
        longitude = #{longitude,jdbcType=DOUBLE},
      </if>
      <if test="latitude != null">
        latitude = #{latitude,jdbcType=DOUBLE},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="updateUserId != null">
        updateUserId = #{updateUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        createUserId = #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.transnova.foundation.vehicleBasic.model.VehicleViolationLog">
    update vehicle_violation_log
    set vehicleId = #{vehicleId,jdbcType=BIGINT},
      occurTime = #{occurTime,jdbcType=TIMESTAMP},
      event = #{event,jdbcType=VARCHAR},
      points = #{points,jdbcType=INTEGER},
      forfeit = #{forfeit,jdbcType=DECIMAL},
      longitude = #{longitude,jdbcType=DOUBLE},
      latitude = #{latitude,jdbcType=DOUBLE},
      address = #{address,jdbcType=VARCHAR},
      updateUserId = #{updateUserId,jdbcType=BIGINT},
      updateTime = #{updateTime,jdbcType=TIMESTAMP},
      createUserId = #{createUserId,jdbcType=BIGINT},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT},
      state = #{state,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="setAllDeleted" parameterType="java.lang.Long" >
    update vehicle_violation_log
    set
      deleted = 1
    where vehicleId = #{vehicleId,jdbcType=BIGINT} and deleted=0 and state != '3'
  </update>
</mapper>