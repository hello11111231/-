<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.transnova.foundation.companyBasic.mapper.CompanyAccidentMapper">
  <resultMap id="BaseResultMap" type="com.transnova.foundation.companyBasic.model.CompanyAccident">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="companyId" jdbcType="BIGINT" property="companyId" />
    <result column="vehicleId" jdbcType="BIGINT" property="vehicleId" />
    <result column="driverId" jdbcType="BIGINT" property="driverId" />
    <result column="driverState" jdbcType="VARCHAR" property="driverState" />
    <result column="physiologyState" jdbcType="VARCHAR" property="physiologyState" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="accidentType" jdbcType="VARCHAR" property="accidentType" />
    <result column="liability" jdbcType="VARCHAR" property="liability" />
    <result column="latitude" jdbcType="DECIMAL" property="latitude" />
    <result column="longitude" jdbcType="DECIMAL" property="longitude" />
    <result column="carDamage" jdbcType="VARCHAR" property="carDamage" />
    <result column="occurrenceTime" jdbcType="TIMESTAMP" property="occurrenceTime" />
    <result column="reportTime" jdbcType="TIMESTAMP" property="reportTime" />
    <result column="details" jdbcType="VARCHAR" property="details" />
    <result column="createUserId" jdbcType="BIGINT" property="createUserId" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="updateUserId" jdbcType="BIGINT" property="updateUserId" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="address" jdbcType="VARCHAR" property="address" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, companyId, vehicleId, driverId, driverState, physiologyState, state, accidentType, 
    liability, latitude, longitude, carDamage, occurrenceTime, reportTime, details, createUserId, 
    createTime, updateUserId, updateTime, deleted, source, address
  </sql>
  <select id="selectByExample" parameterType="com.transnova.foundation.companyBasic.mapper.CompanyAccidentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from company_accident
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from company_accident
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from company_accident
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.transnova.foundation.companyBasic.mapper.CompanyAccidentExample">
    delete from company_accident
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.transnova.foundation.companyBasic.model.CompanyAccident">
    insert into company_accident (id, companyId, vehicleId, 
      driverId, driverState, physiologyState, 
      state, accidentType, liability, 
      latitude, longitude, carDamage, 
      occurrenceTime, reportTime, details, 
      createUserId, createTime, updateUserId, 
      updateTime, deleted, source, 
      address)
    values (#{id,jdbcType=BIGINT}, #{companyId,jdbcType=BIGINT}, #{vehicleId,jdbcType=BIGINT}, 
      #{driverId,jdbcType=BIGINT}, #{driverState,jdbcType=VARCHAR}, #{physiologyState,jdbcType=VARCHAR}, 
      #{state,jdbcType=VARCHAR}, #{accidentType,jdbcType=VARCHAR}, #{liability,jdbcType=VARCHAR}, 
      #{latitude,jdbcType=DECIMAL}, #{longitude,jdbcType=DECIMAL}, #{carDamage,jdbcType=VARCHAR}, 
      #{occurrenceTime,jdbcType=TIMESTAMP}, #{reportTime,jdbcType=TIMESTAMP}, #{details,jdbcType=VARCHAR}, 
      #{createUserId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateUserId,jdbcType=BIGINT}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{deleted,jdbcType=BIT}, #{source,jdbcType=VARCHAR}, 
      #{address,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.transnova.foundation.companyBasic.model.CompanyAccident">
    insert into company_accident
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="companyId != null">
        companyId,
      </if>
      <if test="vehicleId != null">
        vehicleId,
      </if>
      <if test="driverId != null">
        driverId,
      </if>
      <if test="driverState != null">
        driverState,
      </if>
      <if test="physiologyState != null">
        physiologyState,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="accidentType != null">
        accidentType,
      </if>
      <if test="liability != null">
        liability,
      </if>
      <if test="latitude != null">
        latitude,
      </if>
      <if test="longitude != null">
        longitude,
      </if>
      <if test="carDamage != null">
        carDamage,
      </if>
      <if test="occurrenceTime != null">
        occurrenceTime,
      </if>
      <if test="reportTime != null">
        reportTime,
      </if>
      <if test="details != null">
        details,
      </if>
      <if test="createUserId != null">
        createUserId,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="updateUserId != null">
        updateUserId,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="source != null">
        source,
      </if>
      <if test="address != null">
        address,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="companyId != null">
        #{companyId,jdbcType=BIGINT},
      </if>
      <if test="vehicleId != null">
        #{vehicleId,jdbcType=BIGINT},
      </if>
      <if test="driverId != null">
        #{driverId,jdbcType=BIGINT},
      </if>
      <if test="driverState != null">
        #{driverState,jdbcType=VARCHAR},
      </if>
      <if test="physiologyState != null">
        #{physiologyState,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="accidentType != null">
        #{accidentType,jdbcType=VARCHAR},
      </if>
      <if test="liability != null">
        #{liability,jdbcType=VARCHAR},
      </if>
      <if test="latitude != null">
        #{latitude,jdbcType=DECIMAL},
      </if>
      <if test="longitude != null">
        #{longitude,jdbcType=DECIMAL},
      </if>
      <if test="carDamage != null">
        #{carDamage,jdbcType=VARCHAR},
      </if>
      <if test="occurrenceTime != null">
        #{occurrenceTime,jdbcType=TIMESTAMP},
      </if>
      <if test="reportTime != null">
        #{reportTime,jdbcType=TIMESTAMP},
      </if>
      <if test="details != null">
        #{details,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        #{updateUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.transnova.foundation.companyBasic.mapper.CompanyAccidentExample" resultType="java.lang.Long">
    select count(*) from company_accident
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update company_accident
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.companyId != null">
        companyId = #{record.companyId,jdbcType=BIGINT},
      </if>
      <if test="record.vehicleId != null">
        vehicleId = #{record.vehicleId,jdbcType=BIGINT},
      </if>
      <if test="record.driverId != null">
        driverId = #{record.driverId,jdbcType=BIGINT},
      </if>
      <if test="record.driverState != null">
        driverState = #{record.driverState,jdbcType=VARCHAR},
      </if>
      <if test="record.physiologyState != null">
        physiologyState = #{record.physiologyState,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.accidentType != null">
        accidentType = #{record.accidentType,jdbcType=VARCHAR},
      </if>
      <if test="record.liability != null">
        liability = #{record.liability,jdbcType=VARCHAR},
      </if>
      <if test="record.latitude != null">
        latitude = #{record.latitude,jdbcType=DECIMAL},
      </if>
      <if test="record.longitude != null">
        longitude = #{record.longitude,jdbcType=DECIMAL},
      </if>
      <if test="record.carDamage != null">
        carDamage = #{record.carDamage,jdbcType=VARCHAR},
      </if>
      <if test="record.occurrenceTime != null">
        occurrenceTime = #{record.occurrenceTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.reportTime != null">
        reportTime = #{record.reportTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.details != null">
        details = #{record.details,jdbcType=VARCHAR},
      </if>
      <if test="record.createUserId != null">
        createUserId = #{record.createUserId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUserId != null">
        updateUserId = #{record.updateUserId,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=BIT},
      </if>
      <if test="record.source != null">
        source = #{record.source,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update company_accident
    set id = #{record.id,jdbcType=BIGINT},
      companyId = #{record.companyId,jdbcType=BIGINT},
      vehicleId = #{record.vehicleId,jdbcType=BIGINT},
      driverId = #{record.driverId,jdbcType=BIGINT},
      driverState = #{record.driverState,jdbcType=VARCHAR},
      physiologyState = #{record.physiologyState,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=VARCHAR},
      accidentType = #{record.accidentType,jdbcType=VARCHAR},
      liability = #{record.liability,jdbcType=VARCHAR},
      latitude = #{record.latitude,jdbcType=DECIMAL},
      longitude = #{record.longitude,jdbcType=DECIMAL},
      carDamage = #{record.carDamage,jdbcType=VARCHAR},
      occurrenceTime = #{record.occurrenceTime,jdbcType=TIMESTAMP},
      reportTime = #{record.reportTime,jdbcType=TIMESTAMP},
      details = #{record.details,jdbcType=VARCHAR},
      createUserId = #{record.createUserId,jdbcType=BIGINT},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      updateUserId = #{record.updateUserId,jdbcType=BIGINT},
      updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=BIT},
      source = #{record.source,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.transnova.foundation.companyBasic.model.CompanyAccident">
    update company_accident
    <set>
      <if test="companyId != null">
        companyId = #{companyId,jdbcType=BIGINT},
      </if>
      <if test="vehicleId != null">
        vehicleId = #{vehicleId,jdbcType=BIGINT},
      </if>
      <if test="driverId != null">
        driverId = #{driverId,jdbcType=BIGINT},
      </if>
      <if test="driverState != null">
        driverState = #{driverState,jdbcType=VARCHAR},
      </if>
      <if test="physiologyState != null">
        physiologyState = #{physiologyState,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="accidentType != null">
        accidentType = #{accidentType,jdbcType=VARCHAR},
      </if>
      <if test="liability != null">
        liability = #{liability,jdbcType=VARCHAR},
      </if>
      <if test="latitude != null">
        latitude = #{latitude,jdbcType=DECIMAL},
      </if>
      <if test="longitude != null">
        longitude = #{longitude,jdbcType=DECIMAL},
      </if>
      <if test="carDamage != null">
        carDamage = #{carDamage,jdbcType=VARCHAR},
      </if>
      <if test="occurrenceTime != null">
        occurrenceTime = #{occurrenceTime,jdbcType=TIMESTAMP},
      </if>
      <if test="reportTime != null">
        reportTime = #{reportTime,jdbcType=TIMESTAMP},
      </if>
      <if test="details != null">
        details = #{details,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null">
        createUserId = #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        updateUserId = #{updateUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="source != null">
        source = #{source,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.transnova.foundation.companyBasic.model.CompanyAccident">
    update company_accident
    set companyId = #{companyId,jdbcType=BIGINT},
      vehicleId = #{vehicleId,jdbcType=BIGINT},
      driverId = #{driverId,jdbcType=BIGINT},
      driverState = #{driverState,jdbcType=VARCHAR},
      physiologyState = #{physiologyState,jdbcType=VARCHAR},
      state = #{state,jdbcType=VARCHAR},
      accidentType = #{accidentType,jdbcType=VARCHAR},
      liability = #{liability,jdbcType=VARCHAR},
      latitude = #{latitude,jdbcType=DECIMAL},
      longitude = #{longitude,jdbcType=DECIMAL},
      carDamage = #{carDamage,jdbcType=VARCHAR},
      occurrenceTime = #{occurrenceTime,jdbcType=TIMESTAMP},
      reportTime = #{reportTime,jdbcType=TIMESTAMP},
      details = #{details,jdbcType=VARCHAR},
      createUserId = #{createUserId,jdbcType=BIGINT},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateUserId = #{updateUserId,jdbcType=BIGINT},
      updateTime = #{updateTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT},
      source = #{source,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>