<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.transnova.foundation.companyBasic.mapper.CompanyOrganizeMapper">
  <resultMap id="BaseResultMap" type="com.transnova.foundation.companyBasic.model.CompanyOrganize">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="companyId" jdbcType="BIGINT" property="companyId" />
    <result column="departmentId" jdbcType="BIGINT" property="departmentId" />
    <result column="jobDescription" jdbcType="VARCHAR" property="jobDescription" />
    <result column="updateUserId" jdbcType="BIGINT" property="updateUserId" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="createUserId" jdbcType="BIGINT" property="createUserId" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
    <result column="employeeId" jdbcType="BIGINT" property="employeeId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, companyId, departmentId, jobDescription, updateUserId, updateTime, createUserId, 
    createTime, deleted, employeeId
  </sql>
  <select id="selectByExample" parameterType="com.transnova.foundation.companyBasic.mapper.CompanyOrganizeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from company_organize
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from company_organize
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from company_organize
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.transnova.foundation.companyBasic.mapper.CompanyOrganizeExample">
    delete from company_organize
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.transnova.foundation.companyBasic.model.CompanyOrganize">
    insert into company_organize (id, companyId, departmentId, 
      jobDescription, updateUserId, updateTime, 
      createUserId, createTime, deleted, 
      employeeId)
    values (#{id,jdbcType=BIGINT}, #{companyId,jdbcType=BIGINT}, #{departmentId,jdbcType=BIGINT}, 
      #{jobDescription,jdbcType=VARCHAR}, #{updateUserId,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createUserId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{deleted,jdbcType=BIT}, 
      #{employeeId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.transnova.foundation.companyBasic.model.CompanyOrganize">
    insert into company_organize
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="companyId != null">
        companyId,
      </if>
      <if test="departmentId != null">
        departmentId,
      </if>
      <if test="jobDescription != null">
        jobDescription,
      </if>
      <if test="updateUserId != null">
        updateUserId,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
      <if test="createUserId != null">
        createUserId,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="employeeId != null">
        employeeId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="companyId != null">
        #{companyId,jdbcType=BIGINT},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=BIGINT},
      </if>
      <if test="jobDescription != null">
        #{jobDescription,jdbcType=VARCHAR},
      </if>
      <if test="updateUserId != null">
        #{updateUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="employeeId != null">
        #{employeeId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.transnova.foundation.companyBasic.mapper.CompanyOrganizeExample" resultType="java.lang.Long">
    select count(*) from company_organize
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update company_organize
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.companyId != null">
        companyId = #{record.companyId,jdbcType=BIGINT},
      </if>
      <if test="record.departmentId != null">
        departmentId = #{record.departmentId,jdbcType=BIGINT},
      </if>
      <if test="record.jobDescription != null">
        jobDescription = #{record.jobDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.updateUserId != null">
        updateUserId = #{record.updateUserId,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserId != null">
        createUserId = #{record.createUserId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=BIT},
      </if>
      <if test="record.employeeId != null">
        employeeId = #{record.employeeId,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update company_organize
    set id = #{record.id,jdbcType=BIGINT},
      companyId = #{record.companyId,jdbcType=BIGINT},
      departmentId = #{record.departmentId,jdbcType=BIGINT},
      jobDescription = #{record.jobDescription,jdbcType=VARCHAR},
      updateUserId = #{record.updateUserId,jdbcType=BIGINT},
      updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      createUserId = #{record.createUserId,jdbcType=BIGINT},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=BIT},
      employeeId = #{record.employeeId,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.transnova.foundation.companyBasic.model.CompanyOrganize">
    update company_organize
    <set>
      <if test="companyId != null">
        companyId = #{companyId,jdbcType=BIGINT},
      </if>
      <if test="departmentId != null">
        departmentId = #{departmentId,jdbcType=BIGINT},
      </if>
      <if test="jobDescription != null">
        jobDescription = #{jobDescription,jdbcType=VARCHAR},
      </if>
      <if test="updateUserId != null">
        updateUserId = #{updateUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        createUserId = #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="employeeId != null">
        employeeId = #{employeeId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.transnova.foundation.companyBasic.model.CompanyOrganize">
    update company_organize
    set companyId = #{companyId,jdbcType=BIGINT},
      departmentId = #{departmentId,jdbcType=BIGINT},
      jobDescription = #{jobDescription,jdbcType=VARCHAR},
      updateUserId = #{updateUserId,jdbcType=BIGINT},
      updateTime = #{updateTime,jdbcType=TIMESTAMP},
      createUserId = #{createUserId,jdbcType=BIGINT},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT},
      employeeId = #{employeeId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>