<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.transnova.foundation.company.mapper.CompanyWorkInspectionMapper">
  <resultMap id="BaseResultMap" type="com.transnova.foundation.company.model.CompanyWorkInspection">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="proxyCode" jdbcType="VARCHAR" property="proxyCode" />
    <result column="companyId" jdbcType="BIGINT" property="companyId" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="askTime" jdbcType="TIMESTAMP" property="askTime" />
    <result column="expireTime" jdbcType="TIMESTAMP" property="expireTime" />
    <result column="respondTime" jdbcType="TIMESTAMP" property="respondTime" />
    <result column="respondUserId" jdbcType="BIGINT" property="respondUserId" />
    <result column="fromUserId" jdbcType="BIGINT" property="fromUserId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, proxyCode, companyId, state, askTime, expireTime, respondTime, respondUserId, 
    fromUserId
  </sql>
  <select id="selectByExample" parameterType="com.transnova.foundation.company.mapper.CompanyWorkInspectionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from company_work_inspection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from company_work_inspection
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from company_work_inspection
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.transnova.foundation.company.mapper.CompanyWorkInspectionExample">
    delete from company_work_inspection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.transnova.foundation.company.model.CompanyWorkInspection">
    insert into company_work_inspection (id, proxyCode, companyId, 
      state, askTime, expireTime, 
      respondTime, respondUserId, fromUserId
      )
    values (#{id,jdbcType=BIGINT}, #{proxyCode,jdbcType=VARCHAR}, #{companyId,jdbcType=BIGINT}, 
      #{state,jdbcType=VARCHAR}, #{askTime,jdbcType=TIMESTAMP}, #{expireTime,jdbcType=TIMESTAMP}, 
      #{respondTime,jdbcType=TIMESTAMP}, #{respondUserId,jdbcType=BIGINT}, #{fromUserId,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.transnova.foundation.company.model.CompanyWorkInspection">
    insert into company_work_inspection
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="proxyCode != null">
        proxyCode,
      </if>
      <if test="companyId != null">
        companyId,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="askTime != null">
        askTime,
      </if>
      <if test="expireTime != null">
        expireTime,
      </if>
      <if test="respondTime != null">
        respondTime,
      </if>
      <if test="respondUserId != null">
        respondUserId,
      </if>
      <if test="fromUserId != null">
        fromUserId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="proxyCode != null">
        #{proxyCode,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null">
        #{companyId,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="askTime != null">
        #{askTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTime != null">
        #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="respondTime != null">
        #{respondTime,jdbcType=TIMESTAMP},
      </if>
      <if test="respondUserId != null">
        #{respondUserId,jdbcType=BIGINT},
      </if>
      <if test="fromUserId != null">
        #{fromUserId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.transnova.foundation.company.mapper.CompanyWorkInspectionExample" resultType="java.lang.Long">
    select count(*) from company_work_inspection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update company_work_inspection
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.proxyCode != null">
        proxyCode = #{record.proxyCode,jdbcType=VARCHAR},
      </if>
      <if test="record.companyId != null">
        companyId = #{record.companyId,jdbcType=BIGINT},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.askTime != null">
        askTime = #{record.askTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expireTime != null">
        expireTime = #{record.expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.respondTime != null">
        respondTime = #{record.respondTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.respondUserId != null">
        respondUserId = #{record.respondUserId,jdbcType=BIGINT},
      </if>
      <if test="record.fromUserId != null">
        fromUserId = #{record.fromUserId,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update company_work_inspection
    set id = #{record.id,jdbcType=BIGINT},
      proxyCode = #{record.proxyCode,jdbcType=VARCHAR},
      companyId = #{record.companyId,jdbcType=BIGINT},
      state = #{record.state,jdbcType=VARCHAR},
      askTime = #{record.askTime,jdbcType=TIMESTAMP},
      expireTime = #{record.expireTime,jdbcType=TIMESTAMP},
      respondTime = #{record.respondTime,jdbcType=TIMESTAMP},
      respondUserId = #{record.respondUserId,jdbcType=BIGINT},
      fromUserId = #{record.fromUserId,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.transnova.foundation.company.model.CompanyWorkInspection">
    update company_work_inspection
    <set>
      <if test="proxyCode != null">
        proxyCode = #{proxyCode,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null">
        companyId = #{companyId,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="askTime != null">
        askTime = #{askTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTime != null">
        expireTime = #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="respondTime != null">
        respondTime = #{respondTime,jdbcType=TIMESTAMP},
      </if>
      <if test="respondUserId != null">
        respondUserId = #{respondUserId,jdbcType=BIGINT},
      </if>
      <if test="fromUserId != null">
        fromUserId = #{fromUserId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.transnova.foundation.company.model.CompanyWorkInspection">
    update company_work_inspection
    set proxyCode = #{proxyCode,jdbcType=VARCHAR},
      companyId = #{companyId,jdbcType=BIGINT},
      state = #{state,jdbcType=VARCHAR},
      askTime = #{askTime,jdbcType=TIMESTAMP},
      expireTime = #{expireTime,jdbcType=TIMESTAMP},
      respondTime = #{respondTime,jdbcType=TIMESTAMP},
      respondUserId = #{respondUserId,jdbcType=BIGINT},
      fromUserId = #{fromUserId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>