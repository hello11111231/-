<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.transnova.foundation.stat.mapper.StatDriverEventMapper">
  <resultMap id="BaseResultMap" type="com.transnova.foundation.stat.model.StatDriverEvent">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="event" jdbcType="VARCHAR" property="event" />
    <result column="eventType" jdbcType="VARCHAR" property="eventType" />
    <result column="occurCount" jdbcType="INTEGER" property="occurCount" />
    <result column="driverId" jdbcType="BIGINT" property="driverId" />
    <result column="companyId" jdbcType="BIGINT" property="companyId" />
    <result column="analyzeDate" jdbcType="INTEGER" property="analyzeDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>

                  <!-- 新的数据权限控制 -->
                  <when test="criterion.governmentFiltering">
                      and exists (select id from company_manage_relevance _x_ where stat_driver_event.companyId = _x_.companyId and _x_.govCode like #{criterion.governmentCode})
                  </when>

                  <when test="criterion.proxyFiltering">
                      and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{criterion.userOrganizationCode})
                  </when>

                  <when test="criterion.companyFiltering">
                      and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{criterion.userOrganizationCode})
                  </when>

              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, event, eventType, occurCount, driverId, companyId, analyzeDate
  </sql>
  <select id="selectByExample" parameterType="com.transnova.foundation.stat.mapper.StatDriverEventExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from stat_driver_event
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>

    <select id="selectByCondition" parameterType="map" resultMap="BaseResultMap">
        select driverId, sum(occurCount) as occurCount from stat_driver_event
        where 1 = 1

        <if test="governmentFiltering">
            and exists (select id from company_manage_relevance _x_ where stat_driver_event.companyId = _x_.companyId and _x_.govCode like #{filteringGovernmentCode})
        </if>

        <if test="proxyFiltering">
            and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{filteringUserOrganizationCode})
        </if>

        <if test="companyFiltering">
            and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{filteringUserOrganizationCode})
        </if>

        <if test="companyName != null and companyName != ''">
        and companyId in ( select id from company where name like '%${companyName}%' )
        </if>

        <if test="stdCode != null">
            and event in (select eventCode from std_event where 1 = 1
            <if test="eventTypeCode != null">
                and find_in_set(typeCode, #{eventTypeCode})
            </if>
            and stdCode = #{stdCode})
        </if>
        <if test="alarmStartDate != null">
            and analyzeDate &gt;= #{alarmStartDate}
        </if>
        <if test="alarmEndDate != null">
            and analyzeDate &lt;= #{alarmEndDate}
        </if>
        group by driverId
        order by occurCount desc

        <if test="offset != null">
            limit ${offset}, ${limit}
        </if>

    </select>


    <select id="countByCondition" parameterType="map" resultType="java.lang.Long">
        select count(tmp.cnt) from (
        select count(driverId) cnt from stat_driver_event
        where 1 = 1

        <if test="governmentFiltering">
            and exists (select id from company_manage_relevance _x_ where stat_driver_event.companyId = _x_.companyId and _x_.govCode like #{filteringGovernmentCode})
        </if>

        <if test="proxyFiltering">
            and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{filteringUserOrganizationCode})
        </if>

        <if test="companyFiltering">
            and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{filteringUserOrganizationCode})
        </if>
        <if test="companyName != null and companyName != ''">
        and companyId in ( select id from company where name like '%${companyName}%' )
        </if>
        <if test="stdCode != null">
            and event in (select eventCode from std_event where 1 = 1
            <if test="eventTypeCode != null">
                and find_in_set(typeCode, #{eventTypeCode})
            </if>
            and stdCode = #{stdCode})
        </if>
        <if test="alarmStartDate != null">
            and analyzeDate &gt;= #{alarmStartDate}
        </if>
        <if test="alarmEndDate != null">
            and analyzeDate &lt;= #{alarmEndDate}
        </if>
        group by driverId
        ) tmp
    </select>

    <select id="countByTypeCode" parameterType="map" resultType="java.lang.Long">
        select sum(occurCount) from stat_driver_event
        where 1 = 1
        <if test="driverId != null">
            and driverId = #{driverId}
        </if>

        <if test="governmentFiltering">
            and exists (select id from company_manage_relevance _x_ where stat_driver_event.companyId = _x_.companyId and _x_.govCode like #{filteringGovernmentCode})
        </if>

        <if test="proxyFiltering">
            and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{filteringUserOrganizationCode})
        </if>

        <if test="companyFiltering">
            and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{filteringUserOrganizationCode})
        </if>

        <if test="stdCode != null">
            and event in (select eventCode from std_event where 1 = 1
                            <if test="eventTypeCode != null">
                                and find_in_set(typeCode, #{eventTypeCode})
                            </if>
                            and stdCode = #{stdCode}
                        )
        </if>
        <if test="event != null">
            and event = #{event}
        </if>
        <if test="alarmStartDate != null">
            and analyzeDate &gt;= #{alarmStartDate}
        </if>
        <if test="alarmEndDate != null">
            and analyzeDate &lt;= #{alarmEndDate}
        </if>
    </select>

    <select id="countBySubCode" parameterType="map" resultType="java.lang.Long">
        select sum(occurCount) from stat_driver_event
        where 1 = 1
        <if test="driverName != null and driverName != ''">
            and driverId in (select id from driver where 1 = 1 and name like '%${driverName}%')
        </if>
        <if test="governmentFiltering">
            and exists (select id from company_manage_relevance _x_ where stat_driver_event.companyId = _x_.companyId and _x_.govCode like #{governmentCode})
        </if>

        <if test="proxyFiltering">
            and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{filteringUserOrganizationCode})
        </if>

        <if test="companyFiltering">
            and companyId in (select companyId from vehicle_manage_relevance _x_ where _x_.orgCode = #{filteringUserOrganizationCode})
        </if>
        <if test="driverName != null or driverName != ''">
            and driverId in ( select id from driver where name like '%${companyName}%')
        </if>
        <if test="stdCode != null">
            and event in (select eventCode from std_event where 1 = 1 and stdCode = #{stdCode})
        </if>
        <if test="event != null">
            and event = #{event}
        </if>
        <if test="alarmStartDate != null">
            and analyzeDate &gt;= #{alarmStartDate}
        </if>
        <if test="alarmEndDate != null">
            and analyzeDate &lt;= #{alarmEndDate}
        </if>
    </select>


  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from stat_driver_event
    where id = #{id,jdbcType=BIGINT}
  </select>



  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from stat_driver_event
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.transnova.foundation.stat.mapper.StatDriverEventExample">
    delete from stat_driver_event
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.transnova.foundation.stat.model.StatDriverEvent">
    insert into stat_driver_event (id, event,
    eventType, occurCount, driverId,
    companyId, analyzeDate)
    values (#{id,jdbcType=BIGINT}, #{event,jdbcType=VARCHAR},
    #{eventType,jdbcType=VARCHAR}, #{occurCount,jdbcType=INTEGER}, #{driverId,jdbcType=BIGINT},
    #{companyId,jdbcType=BIGINT}, #{analyzeDate,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.transnova.foundation.stat.model.StatDriverEvent">
    insert into stat_driver_event
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="event != null">
        event,
      </if>
      <if test="eventType != null">
        eventType,
      </if>
      <if test="occurCount != null">
        occurCount,
      </if>
      <if test="driverId != null">
        driverId,
      </if>
      <if test="companyId != null">
        companyId,
      </if>
      <if test="analyzeDate != null">
        analyzeDate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="event != null">
        #{event,jdbcType=VARCHAR},
      </if>
      <if test="eventType != null">
        #{eventType,jdbcType=VARCHAR},
      </if>
      <if test="occurCount != null">
        #{occurCount,jdbcType=INTEGER},
      </if>
      <if test="driverId != null">
        #{driverId,jdbcType=BIGINT},
      </if>
      <if test="companyId != null">
        #{companyId,jdbcType=BIGINT},
      </if>
      <if test="analyzeDate != null">
        #{analyzeDate,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.transnova.foundation.stat.mapper.StatDriverEventExample" resultType="java.lang.Long">
    select count(*) from stat_driver_event
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update stat_driver_event
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.event != null">
        event = #{record.event,jdbcType=VARCHAR},
      </if>
      <if test="record.eventType != null">
        eventType = #{record.eventType,jdbcType=VARCHAR},
      </if>
      <if test="record.occurCount != null and record.occurCount > 0">
        occurCount = #{record.occurCount,jdbcType=INTEGER},
      </if>
      <if test="record.driverId != null">
        driverId = #{record.driverId,jdbcType=BIGINT},
      </if>
      <if test="record.companyId != null">
        companyId = #{record.companyId,jdbcType=BIGINT},
      </if>
      <if test="record.analyzeDate != null">
        analyzeDate = #{record.analyzeDate,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update stat_driver_event
    set id = #{record.id,jdbcType=BIGINT},
    event = #{record.event,jdbcType=VARCHAR},
    eventType = #{record.eventType,jdbcType=VARCHAR},
    occurCount = #{record.occurCount,jdbcType=INTEGER},
    driverId = #{record.driverId,jdbcType=BIGINT},
    companyId = #{record.companyId,jdbcType=BIGINT},
    analyzeDate = #{record.analyzeDate,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.transnova.foundation.stat.model.StatDriverEvent">
    update stat_driver_event
    <set>
      <if test="event != null">
        event = #{event,jdbcType=VARCHAR},
      </if>
      <if test="eventType != null">
        eventType = #{eventType,jdbcType=VARCHAR},
      </if>
      <if test="occurCount != null">
        occurCount = #{occurCount,jdbcType=INTEGER},
      </if>
      <if test="driverId != null">
        driverId = #{driverId,jdbcType=BIGINT},
      </if>
      <if test="companyId != null">
        companyId = #{companyId,jdbcType=BIGINT},
      </if>
      <if test="analyzeDate != null">
        analyzeDate = #{analyzeDate,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.transnova.foundation.stat.model.StatDriverEvent">
    update stat_driver_event
    set event = #{event,jdbcType=VARCHAR},
      eventType = #{eventType,jdbcType=VARCHAR},
      occurCount = #{occurCount,jdbcType=INTEGER},
      driverId = #{driverId,jdbcType=BIGINT},
      companyId = #{companyId,jdbcType=BIGINT},
      analyzeDate = #{analyzeDate,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseBy" parameterType="com.transnova.foundation.stat.model.StatDriverEvent">
    update stat_driver_event
    set occurCount = occurCount + #{occurCount,jdbcType=INTEGER}
    where
    id = #{id,jdbcType=BIGINT}
  </update>

</mapper>